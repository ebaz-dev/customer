"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Order = exports.OrderActions = exports.OrderLogType = exports.PaymentMethods = exports.OrderStatus = void 0;
const mongoose_1 = require("mongoose");
const mongoose_update_if_current_1 = require("mongoose-update-if-current");
var OrderStatus;
(function (OrderStatus) {
    OrderStatus["Created"] = "created";
    OrderStatus["Pending"] = "pending";
    OrderStatus["Confirmed"] = "confirmed";
    OrderStatus["Delivered"] = "delivered";
    OrderStatus["Cancelled"] = "cancelled";
})(OrderStatus || (exports.OrderStatus = OrderStatus = {}));
var PaymentMethods;
(function (PaymentMethods) {
    PaymentMethods["Cash"] = "cash";
    PaymentMethods["QPay"] = "qpay";
    PaymentMethods["MBank"] = "mbank";
})(PaymentMethods || (exports.PaymentMethods = PaymentMethods = {}));
var OrderLogType;
(function (OrderLogType) {
    OrderLogType["Status"] = "status";
    OrderLogType["Payment"] = "payment";
    OrderLogType["Supplier"] = "supplier";
})(OrderLogType || (exports.OrderLogType = OrderLogType = {}));
var OrderActions;
(function (OrderActions) {
    OrderActions["Create"] = "create";
    OrderActions["Update"] = "update";
    OrderActions["Confirm"] = "confirm";
    OrderActions["Deliver"] = "deliver";
    OrderActions["Cancel"] = "cancel";
})(OrderActions || (exports.OrderActions = OrderActions = {}));
const orderProductSchema = new mongoose_1.Schema({
    id: {
        type: mongoose_1.Schema.Types.ObjectId,
        required: true,
        ref: "Product",
    },
    name: {
        type: String,
        required: true,
    },
    images: [
        {
            type: String,
            required: false,
        },
    ],
    price: {
        type: Number,
        required: true,
    },
    basePrice: {
        type: Number,
        required: false,
    },
    quantity: {
        type: Number,
        required: true,
    },
    giftQuantity: {
        type: Number,
        required: false,
    },
    inCase: {
        type: Number,
        required: false,
    },
    thirdPartyData: [
        {
            customerId: {
                type: mongoose_1.Schema.Types.ObjectId,
                required: false,
                ref: "Customer",
            },
            productId: {
                type: Number,
                required: false,
            },
        },
    ],
    promoId: {
        type: Number,
        required: false,
    },
}, { _id: false });
const orderLogSchema = new mongoose_1.Schema({
    userId: {
        type: mongoose_1.Schema.Types.ObjectId,
        required: false,
        ref: "User",
    },
    type: { type: String, enum: Object.values(OrderLogType), required: true },
    action: { type: String, enum: Object.values(OrderActions), required: true },
    fields: [
        {
            key: String,
            oldValue: String,
            newValue: String,
        },
    ],
    description: {
        type: String,
        required: false,
    },
}, {
    timestamps: true,
    toJSON: {
        transform(doc, ret) {
            ret.id = ret._id;
            delete ret._id;
        },
    },
});
const orderThirdpartyDataLogSchema = new mongoose_1.Schema({
    thirdPartyId: { type: String, required: false },
    updatedAt: { type: Date, required: false },
    response: [Object],
}, {
    _id: false,
});
const orderSchema = new mongoose_1.Schema({
    orderNo: { type: String, required: false },
    status: { type: String, enum: Object.values(OrderStatus), required: true },
    supplierId: {
        type: mongoose_1.Schema.Types.ObjectId,
        required: true,
        ref: "Customer",
    },
    merchantId: {
        type: mongoose_1.Schema.Types.ObjectId,
        required: true,
        ref: "Customer",
    },
    userId: {
        type: mongoose_1.Schema.Types.ObjectId,
        required: false,
        ref: "User",
    },
    cartId: {
        type: mongoose_1.Schema.Types.ObjectId,
        required: false,
        ref: "Cart",
    },
    products: [orderProductSchema],
    giftProducts: [orderProductSchema],
    orderedAt: Date,
    deliveryDate: Date,
    deliveredAt: Date,
    paymentMethod: {
        type: String,
        enum: Object.values(PaymentMethods),
        required: false,
    },
    thirdPartyId: { type: String, required: false },
    merchantDebt: {
        type: Number,
        required: false,
    },
    logs: [orderLogSchema],
    thirdPartyData: orderThirdpartyDataLogSchema,
}, {
    timestamps: true,
    toJSON: {
        virtuals: true,
        transform(doc, ret) {
            ret.id = ret._id;
            delete ret._id;
        },
    },
});
orderSchema.virtual("merchant", {
    ref: "Customer",
    localField: "merchantId",
    foreignField: "_id",
    justOne: true,
});
orderSchema.virtual("supplier", {
    ref: "Customer",
    localField: "supplierId",
    foreignField: "_id",
    justOne: true,
});
orderSchema.virtual("user", {
    ref: "User",
    localField: "userId",
    foreignField: "_id",
    justOne: true,
});
orderSchema.virtual("cart", {
    ref: "Cart",
    localField: "cartId",
    foreignField: "_id",
    justOne: true,
});
orderSchema.virtual("productDetails", {
    ref: "Product",
    localField: "products.id",
    foreignField: "_id",
});
orderSchema.virtual("giftProductDetails", {
    ref: "Product",
    localField: "giftProducts.id",
    foreignField: "_id",
});
orderSchema.virtual("merchantCategory", {
    ref: "CustomerCategory",
    localField: "cartId",
    foreignField: "_id",
    justOne: true,
});
orderSchema.set("versionKey", "version");
orderSchema.plugin(mongoose_update_if_current_1.updateIfCurrentPlugin);
const Order = (0, mongoose_1.model)("Order", orderSchema);
exports.Order = Order;
